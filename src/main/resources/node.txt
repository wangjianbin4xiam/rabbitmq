
===参考博客===
https://www.kancloud.cn/longxuan/rabbitmq-arron/117518

https://www.jianshu.com/p/79ca08116d57
=======



=============================
发布订阅
1、RabbitMQ消息模式的核心理念
生产者没有直接发送任何消费到队列。实际上，生产者都不知道这个消费是发送给哪个队列的。
相反，生产者只能发送消息给转发器，转发器是非常简单的。一方面它接受生产者的消息，另一方面向队列推送消息

2、转发器的类型
Direct、Topic、Headers和Fanout

3、声明一个转化器
channel.exchangeDeclare(EXCHANGE_NAME, "fanout");

4、fanout转发器非常简单，从名字就可以看出，它是广播接受到的消息给所有的队列

5、临时队列
队列有名字对我们来说是非常重要的——我们需要为消费者指定同一个队列

channel.queueDeclare(queueName,false,false,false,null);声明（创建）队列
channel.queueDeclare().getQueue()：创建一个非持久化、独立的、自动删除的队列，且名字是随机生成的

========================
路由选择
绑定：绑定表示转换器与队列之间的关系。可以简单的认为：队列对该转发器上的消息感兴趣
channel.queueBind(queueName, EXCHANGE_NAME, bindingKey);

bindingKey：绑定键
绑定键关键取决于转换器的类型。对于fanout类型，忽略此参数

1、Direct exchange（直接转发）
消息会被推送至绑定键（binding key）和消息发布附带的选择键（routing key）完全匹配的队列。

2、Topic exchange（主题转发器）
发送给主题转发器的消息不能是任意设置的选择键，必须是用小数点隔开的一系列的标识符

============================
关闭 RabbitMQ 节点
============================
RabbitMQ 集群
RabbitMQ 最优秀的功能之一就是内建集群，这个功能设计的目的是允许消费者和生产者在节点崩溃的情况下继续运行，以及通过添加更多的节点来线性扩展消息通信吞吐量。
RabbitMQ 内部利用 Erlang 提供的分布式通信框架 OTP 来满足上述需求，使客户端在失去一个 RabbitMQ 节点连接的情况下，还是能够重新连接到集群中的任何其他节点继续生产、消费消息。

    RabbitMQ 只要求集群中至少有一个磁盘节点，所有其他节点可以是内存节点。
当节点加入后离开集群时，它们必须要将该变更通知到至少一个磁盘节点。
如果只有一个磁盘节点，刚好又是该节点崩溃了，那么集群可以继续路由消息，
但不能创建队列、创建交换器、创建绑定、添加用户、更改权限、添加或删除集群节点。
换句话说集群中的唯一磁盘节点崩溃的话，集群仍然可以运行，但知道该节点恢复，否则无法更改任何东西

